package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"errors"
	"fmt"
	"gin-auth-mongo/graph"
	"gin-auth-mongo/graph/model"
	"gin-auth-mongo/models/requests"
	authService "gin-auth-mongo/services/auth"
)

// UserEmailRegisterWithLink is the resolver for the userEmailRegisterWithLink field.
func (r *mutationResolver) UserEmailRegisterWithLink(ctx context.Context, request requests.EmailRegisterLinkRequest) (bool, error) {
	if err := request.Validate(); err != nil {
		return false, err
	}

	err := authService.UserEmailRegisterWithLink(&request)
	if err != nil {
		return false, err
	}

	return true, nil
}

// UserEmailRegisterWithLinkVerify is the resolver for the userEmailRegisterWithLinkVerify field.
func (r *mutationResolver) UserEmailRegisterWithLinkVerify(ctx context.Context, request requests.EmailRegisterLinkVerifyRequest) (bool, error) {
	if err := request.Validate(); err != nil {
		return false, err
	}

	err := authService.UserEmailRegisterLinkVerify(&request)
	if err != nil {
		return false, err
	}

	return true, nil
}

// UserEmailRegisterWithCode is the resolver for the userEmailRegisterWithCode field.
func (r *mutationResolver) UserEmailRegisterWithCode(ctx context.Context, request requests.EmailRegisterCodeRequest) (bool, error) {
	if err := request.Validate(); err != nil {
		return false, err
	}

	err := authService.UserEmailRegisterWithCode(&request)
	if err != nil {
		return false, err
	}

	return true, nil
}

// UserEmailRegisterWithCodeVerify is the resolver for the userEmailRegisterWithCodeVerify field.
func (r *mutationResolver) UserEmailRegisterWithCodeVerify(ctx context.Context, request requests.EmailRegisterCodeVerifyRequest) (bool, error) {
	if err := request.Validate(); err != nil {
		return false, err
	}

	err := authService.UserEmailRegisterCodeVerify(&request)
	if err != nil {
		return false, err
	}

	return true, nil
}

// UserEmailLoginWithPassword is the resolver for the userEmailLoginWithPassword field.
func (r *mutationResolver) UserEmailLoginWithPassword(ctx context.Context, request requests.EmailLoginWithPasswordRequest) (*model.LoginResponse, error) {
	if err := request.Validate(); err != nil {
		return nil, err
	}

	user, token, err := authService.UserEmailLoginWithPassword(&request)
	if err != nil {
		return nil, err
	}

	return &model.LoginResponse{User: user, Token: token}, nil
}

// UserUsernameLoginWithPassword is the resolver for the userUsernameLoginWithPassword field.
func (r *mutationResolver) UserUsernameLoginWithPassword(ctx context.Context, request requests.UsernameLoginWithPasswordRequest) (*model.LoginResponse, error) {
	if err := request.Validate(); err != nil {
		return nil, err
	}

	user, token, err := authService.UserUsernameLoginWithPassword(&request)
	if err != nil {
		return nil, err
	}

	return &model.LoginResponse{User: user, Token: token}, nil
}

// UserEmailResetPasswordWithLink is the resolver for the userEmailResetPasswordWithLink field.
func (r *mutationResolver) UserEmailResetPasswordWithLink(ctx context.Context, request requests.EmailPasswordResetLinkRequest) (bool, error) {
	if err := request.Validate(); err != nil {
		return false, err
	}

	err := authService.UserEmailResetPasswordWithLink(&request)
	if err != nil {
		return false, err
	}

	return true, nil
}

// UserEmailResetPasswordWithLinkVerify is the resolver for the userEmailResetPasswordWithLinkVerify field.
func (r *mutationResolver) UserEmailResetPasswordWithLinkVerify(ctx context.Context, request requests.EmailPasswordResetLinkVerifyRequest) (bool, error) {
	if err := request.Validate(); err != nil {
		return false, err
	}

	err := authService.UserEmailResetPasswordLinkVerify(&request)
	if err != nil {
		return false, err
	}

	return true, nil
}

// UserEmailResetPasswordWithCode is the resolver for the userEmailResetPasswordWithCode field.
func (r *mutationResolver) UserEmailResetPasswordWithCode(ctx context.Context, request requests.EmailPasswordResetCodeRequest) (bool, error) {
	if err := request.Validate(); err != nil {
		return false, err
	}

	err := authService.UserEmailResetPasswordWithCode(&request)
	if err != nil {
		return false, err
	}

	return true, nil
}

// UserEmailResetPasswordWithCodeVerify is the resolver for the userEmailResetPasswordWithCodeVerify field.
func (r *mutationResolver) UserEmailResetPasswordWithCodeVerify(ctx context.Context, request requests.EmailPasswordResetCodeVerifyRequest) (bool, error) {
	panic(fmt.Errorf("not implemented: UserEmailResetPasswordWithCodeVerify - userEmailResetPasswordWithCodeVerify"))
}

// RefreshToken is the resolver for the refreshToken field.
func (r *queryResolver) RefreshToken(ctx context.Context) (*model.AccessToken, error) {
	refreshToken, ok := ctx.Value("token").(string)
	if !ok {
		return nil, errors.New("failed to cast context to string")
	}

	accessToken, err := authService.RefreshToken(refreshToken)
	if err != nil {
		return nil, err
	}

	return accessToken, nil
}

// CheckUserEmailRegisterLinkExpired is the resolver for the checkUserEmailRegisterLinkExpired field.
func (r *queryResolver) CheckUserEmailRegisterLinkExpired(ctx context.Context, flowID string) (bool, error) {
	_, err := authService.CheckUserEmailRegisterLinkExpired(flowID)
	if err != nil {
		return false, err
	}

	return true, nil
}

// CheckResetPasswordCodeExpired is the resolver for the checkResetPasswordCodeExpired field.
func (r *queryResolver) CheckUserEmailResetPasswordLinkExpired(ctx context.Context, flowID string) (bool, error) {
	_, err := authService.CheckUserEmailResetPasswordLinkExpired(flowID)
	if err != nil {
		return false, err
	}

	return true, nil
}

// Nickname is the resolver for the nickname field.
func (r *emailRegisterCodeVerifyRequestResolver) Nickname(ctx context.Context, obj *requests.EmailRegisterCodeVerifyRequest, data *string) error {
	panic(fmt.Errorf("not implemented: Nickname - nickname"))
}

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

// EmailRegisterCodeVerifyRequest returns graph.EmailRegisterCodeVerifyRequestResolver implementation.
func (r *Resolver) EmailRegisterCodeVerifyRequest() graph.EmailRegisterCodeVerifyRequestResolver {
	return &emailRegisterCodeVerifyRequestResolver{r}
}

type queryResolver struct{ *Resolver }
type emailRegisterCodeVerifyRequestResolver struct{ *Resolver }
